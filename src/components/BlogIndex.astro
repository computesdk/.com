---
import { getCollection } from "astro:content";

const posts = await getCollection("blog");

// Sort by newest first
const sorted = posts.sort(
  (a, b) => b.data.date.valueOf() - a.data.date.valueOf()
);

// Pick featured post
const featured = sorted.find((p) => p.data.featured);

// All other posts  
const pastPosts = sorted.filter((p) => p.id !== featured?.id);

// Collect unique tags
const tags = Array.from(
  new Set(posts.flatMap((p) => p.data.tags ?? []))
).sort();
---

<section class="max-w-4xl mx-auto space-y-12 mt-12">

  <!-- Tag Filter Buttons -->
  {tags.length > 0 && (
    <div class="mb-8">
      <div class="flex flex-wrap gap-6 justify-center items-end">
        <button 
          class="tag-filter px-2 py-1 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-all duration-200 text-sm whitespace-nowrap active"
          data-tag="all"
        >
          All Posts
        </button>
        {tags.map((tag) => (
          <button 
            class="tag-filter px-2 py-1 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-all duration-200 text-sm whitespace-nowrap"
            data-tag={tag}
          >
            {tag}
          </button>
        ))}
      </div>
    </div>
  )}


  <!-- Featured Post -->
  {featured && (
    <article class="featured-post p-8 bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 border border-green-200 dark:border-green-700 rounded-2xl shadow-lg mb-12" data-tags={featured.data.tags?.join(',') || ''}>
      <div class="flex items-start justify-between mb-4">
        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100">
          Featured
        </span>
        <time class="text-gray-500 dark:text-gray-400 text-sm">
          {featured.data.date.toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          })}
        </time>
      </div>
      
      <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">
        <a href={`/blog/${featured.slug}/`} class="hover:text-green-700 dark:hover:text-green-400 transition-colors">
          {featured.data.title}
        </a>
      </h2>
      
      {featured.data.description && (
        <p class="text-lg text-gray-600 dark:text-gray-300 mb-4 leading-relaxed">
          {featured.data.description}
        </p>
      )}
      
      {featured.data.tags && featured.data.tags.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-4">
          {featured.data.tags.map((tag) => (
            <span class="px-3 py-1 bg-emerald-50/70 dark:bg-emerald-900/20 text-emerald-600 dark:text-emerald-400 rounded-md text-xs font-medium">
              {tag}
            </span>
          ))}
        </div>
      )}
      
      <a 
        href={`/blog/${featured.slug}/`} 
        class="inline-flex items-center text-gray-900 dark:text-gray-300 font-md no-underline hover:underline"
      >
        Read more →
      </a>
    </article>
  )}

  <!-- All Posts -->
  <section>
    <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-8">All Posts</h3>
    <div class="space-y-6">
      {sorted.map((post) => (
        <article class="blog-post p-6 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-xl shadow-sm hover:shadow-md transition-shadow duration-200" data-tags={post.data.tags?.join(',') || ''}>
          <div class="flex items-start justify-between mb-3">
            <time class="text-gray-500 dark:text-gray-400 text-sm">
              {post.data.date.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}
            </time>
            {post.data.featured && (
              <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100">
                Featured
              </span>
            )}
          </div>
          
          <h4 class="text-xl font-bold text-gray-900 dark:text-white mb-3">
            <a href={`/blog/${post.slug}/`} class="hover:text-green-700 dark:hover:text-green-400 transition-colors">
              {post.data.title}
            </a>
          </h4>
          
          {post.data.description && (
            <p class="text-gray-600 dark:text-gray-300 mb-4 leading-relaxed">
              {post.data.description}
            </p>
          )}
          
          {post.data.tags && post.data.tags.length > 0 && (
            <div class="flex flex-wrap gap-2 mb-4">
              {post.data.tags.map((tag) => (
                <span class="px-2 py-1 bg-gray-100/80 dark:bg-gray-700/50 text-gray-500 dark:text-gray-400 rounded text-xs font-medium">
                  {tag}
                </span>
              ))}
            </div>
          )}
          
          <a 
            href={`/blog/${post.slug}/`} 
            class="inline-flex items-center text-green-700 dark:text-green-300 font-md no-underline hover:underline"
          >
            Read article →
          </a>
        </article>
      ))}
    </div>
  </section>

  <!-- RSS Link -->
  <div class="mt-12 text-center m-12">
    <a 
    href="/blog/rss.xml" 
    class="inline-flex items-center text-gray-600 dark:text-gray-400 hover:text-green-600 dark:hover:text-green-400 transition-colors"
    target="_blank"
  >
    <svg 
      class="w-5 h-5 mr-2" 
      fill="currentColor" 
      viewBox="0 0 20 20"
    >
      <!-- Dot -->
      <circle cx="4" cy="16" r="2"></circle>
      <!-- Small arc -->
      <path d="M4 10a6 6 0 016 6" stroke="currentColor" stroke-width="2" fill="none"/>
      <!-- Large arc -->
      <path d="M4 4a12 12 0 0112 12" stroke="currentColor" stroke-width="2" fill="none"/>
    </svg>
  </a>
  
  </div>
</section>

<script>
  // Tag filtering functionality
  document.addEventListener('DOMContentLoaded', function() {
    const tagButtons = document.querySelectorAll<HTMLButtonElement>('.tag-filter');
    const posts = document.querySelectorAll<HTMLElement>('.blog-post');
    const featuredPost = document.querySelector<HTMLElement>('.featured-post');

    tagButtons.forEach(button => {
      button.addEventListener('click', function(event) {
        const target = event.currentTarget as HTMLButtonElement;
        const selectedTag = target.getAttribute('data-tag');
        
        // Ensure we have a valid tag
        if (!selectedTag) return;
        
        // Update button states
        tagButtons.forEach(btn => {
          btn.classList.remove('active');
          btn.classList.remove('font-bold', 'underline', 'text-emerald-600', 'dark:text-emerald-400');
          btn.classList.add('font-normal', 'text-gray-600', 'dark:text-gray-400');
        });
        
        target.classList.add('active');
        target.classList.add('font-bold', 'underline', 'text-emerald-600', 'dark:text-emerald-400');
        target.classList.remove('font-normal', 'text-gray-600', 'dark:text-gray-400');
        
        // Filter posts
        posts.forEach(post => {
          const postTags = post.getAttribute('data-tags') || '';
          if (selectedTag === 'all' || postTags.includes(selectedTag)) {
            post.style.display = 'block';
          } else {
            post.style.display = 'none';
          }
        });
        
        // Filter featured post
        if (featuredPost) {
          const featuredTags = featuredPost.getAttribute('data-tags') || '';
          if (selectedTag === 'all' || featuredTags.includes(selectedTag)) {
            featuredPost.style.display = 'block';
          } else {
            featuredPost.style.display = 'none';
          }
        }
      });
    });
  });
</script>

<style>
  .tag-filter {
    background: transparent !important;
  }
  
  .tag-filter.active {
    font-weight: 700 !important;
    text-decoration: underline !important;
    color: #059669 !important;
  }
  
  .dark .tag-filter.active {
    color: #6ee7b7 !important;
  }
</style>
